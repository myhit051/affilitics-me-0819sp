// Facebook API Test Utility
// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Facebook API ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á

import { getFacebookAPIClient } from '@/lib/facebook-api-client';
import { getFacebookConfig, validateRuntimeConfig } from '@/config/facebook';
import { getFacebookDataCache } from '@/lib/facebook-data-cache';

export interface FacebookTestResult {
  success: boolean;
  message: string;
  data?: any;
  error?: string;
  timestamp: Date;
}

export class FacebookAPITester {
  private client: any;
  private cache: any;

  constructor() {
    this.client = getFacebookAPIClient();
    this.cache = getFacebookDataCache();
  }

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  async testConfiguration(): Promise<FacebookTestResult> {
    try {
      const config = getFacebookConfig();
      const validation = validateRuntimeConfig();

      if (!validation.isValid) {
        return {
          success: false,
          message: '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Facebook API ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
          error: validation.errors.join(', '),
          timestamp: new Date()
        };
      }

      return {
        success: true,
        message: '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Facebook API ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        data: {
          appId: config.FACEBOOK_APP_ID ? '***configured***' : 'missing',
          apiVersion: config.FACEBOOK_API_VERSION,
          scopes: config.FACEBOOK_SCOPES,
          warnings: validation.warnings
        },
        timestamp: new Date()
      };
    } catch (error) {
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤',
        error: error instanceof Error ? error.message : 'Unknown error',
        timestamp: new Date()
      };
    }
  }

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ access token)
  async testAPIConnection(accessToken: string): Promise<FacebookTestResult> {
    try {
      if (!accessToken) {
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Access Token',
          error: 'Access token is required for API testing',
          timestamp: new Date()
        };
      }

      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user profile
      const response = await fetch(`https://graph.facebook.com/v19.0/me?access_token=${accessToken}`);
      
      if (!response.ok) {
        const errorData = await response.json();
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Facebook API ‡πÑ‡∏î‡πâ',
          error: errorData.error?.message || 'API connection failed',
          timestamp: new Date()
        };
      }

      const userData = await response.json();
      
      return {
        success: true,
        message: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Facebook API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: {
          userId: userData.id,
          userName: userData.name,
          apiVersion: 'v19.0'
        },
        timestamp: new Date()
      };
    } catch (error) {
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö API',
        error: error instanceof Error ? error.message : 'Unknown error',
        timestamp: new Date()
      };
    }
  }

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ad Accounts
  async testAdAccounts(accessToken: string): Promise<FacebookTestResult> {
    try {
      const response = await fetch(
        `https://graph.facebook.com/v19.0/me/adaccounts?fields=id,name,account_status,currency,timezone_name&access_token=${accessToken}`
      );

      if (!response.ok) {
        const errorData = await response.json();
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ad Accounts ‡πÑ‡∏î‡πâ',
          error: errorData.error?.message || 'Failed to fetch ad accounts',
          timestamp: new Date()
        };
      }

      const accountsData = await response.json();
      
      return {
        success: true,
        message: `‡∏û‡∏ö Ad Accounts ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${accountsData.data?.length || 0} accounts`,
        data: {
          totalAccounts: accountsData.data?.length || 0,
          accounts: accountsData.data?.map((account: any) => ({
            id: account.id,
            name: account.name,
            status: account.account_status,
            currency: account.currency,
            timezone: account.timezone_name
          })) || []
        },
        timestamp: new Date()
      };
    } catch (error) {
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ad Accounts',
        error: error instanceof Error ? error.message : 'Unknown error',
        timestamp: new Date()
      };
    }
  }

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Campaigns
  async testCampaigns(accessToken: string, accountId: string): Promise<FacebookTestResult> {
    try {
      const response = await fetch(
        `https://graph.facebook.com/v19.0/${accountId}/campaigns?fields=id,name,status,objective,created_time,updated_time&limit=10&access_token=${accessToken}`
      );

      if (!response.ok) {
        const errorData = await response.json();
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Campaigns ‡πÑ‡∏î‡πâ',
          error: errorData.error?.message || 'Failed to fetch campaigns',
          timestamp: new Date()
        };
      }

      const campaignsData = await response.json();
      
      return {
        success: true,
        message: `‡∏û‡∏ö Campaigns ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${campaignsData.data?.length || 0} campaigns`,
        data: {
          accountId,
          totalCampaigns: campaignsData.data?.length || 0,
          campaigns: campaignsData.data?.map((campaign: any) => ({
            id: campaign.id,
            name: campaign.name,
            status: campaign.status,
            objective: campaign.objective,
            createdTime: campaign.created_time,
            updatedTime: campaign.updated_time
          })) || []
        },
        timestamp: new Date()
      };
    } catch (error) {
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Campaigns',
        error: error instanceof Error ? error.message : 'Unknown error',
        timestamp: new Date()
      };
    }
  }

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Insights
  async testInsights(accessToken: string, campaignId: string): Promise<FacebookTestResult> {
    try {
      const dateRange = {
        since: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 7 days ago
        until: new Date().toISOString().split('T')[0] // today
      };

      const response = await fetch(
        `https://graph.facebook.com/v19.0/${campaignId}/insights?fields=impressions,clicks,spend,ctr,cpm,cpp&time_range={"since":"${dateRange.since}","until":"${dateRange.until}"}&access_token=${accessToken}`
      );

      if (!response.ok) {
        const errorData = await response.json();
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Insights ‡πÑ‡∏î‡πâ',
          error: errorData.error?.message || 'Failed to fetch insights',
          timestamp: new Date()
        };
      }

      const insightsData = await response.json();
      
      return {
        success: true,
        message: `‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Insights ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${dateRange.since} - ${dateRange.until})`,
        data: {
          campaignId,
          dateRange,
          insights: insightsData.data?.[0] || null,
          hasData: insightsData.data?.length > 0
        },
        timestamp: new Date()
      };
    } catch (error) {
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Insights',
        error: error instanceof Error ? error.message : 'Unknown error',
        timestamp: new Date()
      };
    }
  }

  // ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  async runFullTest(accessToken?: string): Promise<FacebookTestResult[]> {
    const results: FacebookTestResult[] = [];

    // 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    console.log('üîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Facebook API...');
    const configTest = await this.testConfiguration();
    results.push(configTest);

    if (!configTest.success) {
      console.error('‚ùå ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:', configTest.error);
      return results;
    }

    if (!accessToken) {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Access Token - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö API');
      return results;
    }

    // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API
    console.log('üîó ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Facebook API...');
    const connectionTest = await this.testAPIConnection(accessToken);
    results.push(connectionTest);

    if (!connectionTest.success) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ:', connectionTest.error);
      return results;
    }

    // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ad Accounts
    console.log('üìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ad Accounts...');
    const accountsTest = await this.testAdAccounts(accessToken);
    results.push(accountsTest);

    if (!accountsTest.success || !accountsTest.data?.accounts?.length) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Ad Accounts ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
      return results;
    }

    // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Campaigns (‡πÉ‡∏ä‡πâ account ‡πÅ‡∏£‡∏Å)
    const firstAccount = accountsTest.data.accounts[0];
    console.log(`üéØ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Campaigns ‡∏à‡∏≤‡∏Å ${firstAccount.name}...`);
    const campaignsTest = await this.testCampaigns(accessToken, firstAccount.id);
    results.push(campaignsTest);

    if (campaignsTest.success && campaignsTest.data?.campaigns?.length > 0) {
      // 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Insights (‡πÉ‡∏ä‡πâ campaign ‡πÅ‡∏£‡∏Å)
      const firstCampaign = campaignsTest.data.campaigns[0];
      console.log(`üìà ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Insights ‡∏à‡∏≤‡∏Å ${firstCampaign.name}...`);
      const insightsTest = await this.testInsights(accessToken, firstCampaign.id);
      results.push(insightsTest);
    }

    return results;
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  displayResults(results: FacebookTestResult[]): void {
    console.log('\nüìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Facebook API:');
    console.log('='.repeat(50));

    results.forEach((result, index) => {
      const status = result.success ? '‚úÖ' : '‚ùå';
      console.log(`${index + 1}. ${status} ${result.message}`);
      
      if (result.error) {
        console.log(`   ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${result.error}`);
      }
      
      if (result.data && typeof result.data === 'object') {
        console.log(`   ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:`, JSON.stringify(result.data, null, 2));
      }
      
      console.log(`   ‡πÄ‡∏ß‡∏•‡∏≤: ${result.timestamp.toLocaleString('th-TH')}`);
      console.log('');
    });

    const successCount = results.filter(r => r.success).length;
    const totalCount = results.length;
    
    console.log(`üìä ‡∏ú‡∏•‡∏£‡∏ß‡∏°: ${successCount}/${totalCount} ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    
    if (successCount === totalCount) {
      console.log('üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Facebook ‡∏à‡∏£‡∏¥‡∏á');
    } else {
      console.log('‚ö†Ô∏è ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á');
    }
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
export const facebookTester = new FacebookAPITester();

// Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
export const testFacebookAPI = async (accessToken?: string) => {
  const tester = new FacebookAPITester();
  const results = await tester.runFullTest(accessToken);
  tester.displayResults(results);
  return results;
};