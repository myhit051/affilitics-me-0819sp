// Facebook API Test Script
// ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô browser console ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö Facebook API

console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Facebook API...');

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
window.facebookTestResults = [];

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
async function testFacebookConfig() {
  console.log('üîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Facebook API...');
  
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö environment variables
    const appId = import.meta.env.VITE_FACEBOOK_APP_ID;
    const apiVersion = import.meta.env.VITE_FACEBOOK_API_VERSION;
    const redirectUri = import.meta.env.VITE_FACEBOOK_REDIRECT_URI;
    const scopes = import.meta.env.VITE_FACEBOOK_SCOPES;
    
    const result = {
      test: 'Configuration',
      success: !!(appId && apiVersion && redirectUri && scopes),
      data: {
        hasAppId: !!appId,
        apiVersion: apiVersion || 'not set',
        redirectUri: redirectUri || 'not set',
        scopes: scopes || 'not set'
      },
      timestamp: new Date().toISOString()
    };
    
    window.facebookTestResults.push(result);
    
    if (result.success) {
      console.log('‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Facebook API ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      console.log('üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:', result.data);
    } else {
      console.log('‚ùå ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Facebook API ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
      console.log('üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:', result.data);
    }
    
    return result;
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:', error);
    return {
      test: 'Configuration',
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API
async function testFacebookConnection(accessToken) {
  console.log('üîó ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Facebook API...');
  
  if (!accessToken) {
    console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Access Token - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
    return {
      test: 'Connection',
      success: false,
      error: 'No access token provided',
      timestamp: new Date().toISOString()
    };
  }
  
  try {
    const response = await fetch(`https://graph.facebook.com/v19.0/me?access_token=${accessToken}`);
    const data = await response.json();
    
    if (response.ok) {
      const result = {
        test: 'Connection',
        success: true,
        data: {
          userId: data.id,
          userName: data.name
        },
        timestamp: new Date().toISOString()
      };
      
      window.facebookTestResults.push(result);
      console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Facebook API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      console.log('üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', data.name, '(ID:', data.id, ')');
      return result;
    } else {
      throw new Error(data.error?.message || 'API connection failed');
    }
  } catch (error) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Facebook API ‡πÑ‡∏î‡πâ:', error);
    return {
      test: 'Connection',
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ad Accounts
async function testFacebookAdAccounts(accessToken) {
  console.log('üìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ad Accounts...');
  
  if (!accessToken) {
    console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Access Token - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Ad Accounts');
    return null;
  }
  
  try {
    const response = await fetch(
      `https://graph.facebook.com/v19.0/me/adaccounts?fields=id,name,account_status,currency,timezone_name&access_token=${accessToken}`
    );
    const data = await response.json();
    
    if (response.ok) {
      const result = {
        test: 'Ad Accounts',
        success: true,
        data: {
          totalAccounts: data.data?.length || 0,
          accounts: data.data?.map(account => ({
            id: account.id,
            name: account.name,
            status: account.account_status,
            currency: account.currency,
            timezone: account.timezone_name
          })) || []
        },
        timestamp: new Date().toISOString()
      };
      
      window.facebookTestResults.push(result);
      console.log(`‚úÖ ‡∏û‡∏ö Ad Accounts ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${result.data.totalAccounts} accounts`);
      
      if (result.data.accounts.length > 0) {
        console.log('üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Ad Accounts:');
        result.data.accounts.forEach((account, index) => {
          console.log(`  ${index + 1}. ${account.name} (${account.id}) - ${account.status}`);
        });
      }
      
      return result;
    } else {
      throw new Error(data.error?.message || 'Failed to fetch ad accounts');
    }
  } catch (error) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ad Accounts ‡πÑ‡∏î‡πâ:', error);
    return {
      test: 'Ad Accounts',
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Campaigns
async function testFacebookCampaigns(accessToken, accountId) {
  console.log(`üéØ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Campaigns ‡∏à‡∏≤‡∏Å Account ${accountId}...`);
  
  if (!accessToken || !accountId) {
    console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Access Token ‡∏´‡∏£‡∏∑‡∏≠ Account ID - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Campaigns');
    return null;
  }
  
  try {
    const response = await fetch(
      `https://graph.facebook.com/v19.0/${accountId}/campaigns?fields=id,name,status,objective,created_time,updated_time&limit=5&access_token=${accessToken}`
    );
    const data = await response.json();
    
    if (response.ok) {
      const result = {
        test: 'Campaigns',
        success: true,
        data: {
          accountId: accountId,
          totalCampaigns: data.data?.length || 0,
          campaigns: data.data?.map(campaign => ({
            id: campaign.id,
            name: campaign.name,
            status: campaign.status,
            objective: campaign.objective,
            createdTime: campaign.created_time,
            updatedTime: campaign.updated_time
          })) || []
        },
        timestamp: new Date().toISOString()
      };
      
      window.facebookTestResults.push(result);
      console.log(`‚úÖ ‡∏û‡∏ö Campaigns ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${result.data.totalCampaigns} campaigns`);
      
      if (result.data.campaigns.length > 0) {
        console.log('üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Campaigns:');
        result.data.campaigns.forEach((campaign, index) => {
          console.log(`  ${index + 1}. ${campaign.name} (${campaign.id}) - ${campaign.status}`);
        });
      }
      
      return result;
    } else {
      throw new Error(data.error?.message || 'Failed to fetch campaigns');
    }
  } catch (error) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Campaigns ‡πÑ‡∏î‡πâ:', error);
    return {
      test: 'Campaigns',
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Insights
async function testFacebookInsights(accessToken, campaignId) {
  console.log(`üìà ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Insights ‡∏à‡∏≤‡∏Å Campaign ${campaignId}...`);
  
  if (!accessToken || !campaignId) {
    console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Access Token ‡∏´‡∏£‡∏∑‡∏≠ Campaign ID - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Insights');
    return null;
  }
  
  try {
    const dateRange = {
      since: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 7 days ago
      until: new Date().toISOString().split('T')[0] // today
    };
    
    const response = await fetch(
      `https://graph.facebook.com/v19.0/${campaignId}/insights?fields=impressions,clicks,spend,ctr,cpm,cpp&time_range={"since":"${dateRange.since}","until":"${dateRange.until}"}&access_token=${accessToken}`
    );
    const data = await response.json();
    
    if (response.ok) {
      const result = {
        test: 'Insights',
        success: true,
        data: {
          campaignId: campaignId,
          dateRange: dateRange,
          insights: data.data?.[0] || null,
          hasData: data.data?.length > 0
        },
        timestamp: new Date().toISOString()
      };
      
      window.facebookTestResults.push(result);
      console.log(`‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Insights ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${dateRange.since} - ${dateRange.until})`);
      
      if (result.data.insights) {
        console.log('üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:');
        const insights = result.data.insights;
        console.log(`  - Impressions: ${insights.impressions || 'N/A'}`);
        console.log(`  - Clicks: ${insights.clicks || 'N/A'}`);
        console.log(`  - Spend: ${insights.spend || 'N/A'}`);
        console.log(`  - CTR: ${insights.ctr || 'N/A'}%`);
        console.log(`  - CPM: ${insights.cpm || 'N/A'}`);
      } else {
        console.log('üìä ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å');
      }
      
      return result;
    } else {
      throw new Error(data.error?.message || 'Failed to fetch insights');
    }
  } catch (error) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Insights ‡πÑ‡∏î‡πâ:', error);
    return {
      test: 'Insights',
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function runFullFacebookTest(accessToken) {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Facebook API ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö...');
  console.log('='.repeat(60));
  
  // ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡πà‡∏≤
  window.facebookTestResults = [];
  
  // 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
  const configResult = await testFacebookConfig();
  
  if (!configResult.success) {
    console.log('‚ùå ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
    return window.facebookTestResults;
  }
  
  if (!accessToken) {
    console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Access Token - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö API');
    console.log('üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:');
    console.log('   1. ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Facebook ‡∏ú‡πà‡∏≤‡∏ô UI');
    console.log('   2. ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏±‡∏ô: runFullFacebookTest("YOUR_ACCESS_TOKEN")');
    return window.facebookTestResults;
  }
  
  // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  const connectionResult = await testFacebookConnection(accessToken);
  
  if (!connectionResult.success) {
    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ - ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
    return window.facebookTestResults;
  }
  
  // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Ad Accounts
  const accountsResult = await testFacebookAdAccounts(accessToken);
  
  if (!accountsResult?.success || !accountsResult.data?.accounts?.length) {
    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Ad Accounts - ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
    return window.facebookTestResults;
  }
  
  // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Campaigns (‡πÉ‡∏ä‡πâ account ‡πÅ‡∏£‡∏Å)
  const firstAccount = accountsResult.data.accounts[0];
  const campaignsResult = await testFacebookCampaigns(accessToken, firstAccount.id);
  
  if (campaignsResult?.success && campaignsResult.data?.campaigns?.length > 0) {
    // 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Insights (‡πÉ‡∏ä‡πâ campaign ‡πÅ‡∏£‡∏Å)
    const firstCampaign = campaignsResult.data.campaigns[0];
    await testFacebookInsights(accessToken, firstCampaign.id);
  }
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  console.log('\nüìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Facebook API:');
  console.log('='.repeat(60));
  
  const successCount = window.facebookTestResults.filter(r => r.success).length;
  const totalCount = window.facebookTestResults.length;
  
  window.facebookTestResults.forEach((result, index) => {
    const status = result.success ? '‚úÖ' : '‚ùå';
    console.log(`${index + 1}. ${status} ${result.test}`);
    if (result.error) {
      console.log(`   ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${result.error}`);
    }
  });
  
  console.log(`\nüìä ‡∏ú‡∏•‡∏£‡∏ß‡∏°: ${successCount}/${totalCount} ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
  
  if (successCount === totalCount) {
    console.log('üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Facebook ‡∏à‡∏£‡∏¥‡∏á');
  } else {
    console.log('‚ö†Ô∏è ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á');
  }
  
  console.log('\nüíæ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô window.facebookTestResults');
  
  return window.facebookTestResults;
}

// Export functions to global scope
window.testFacebookConfig = testFacebookConfig;
window.testFacebookConnection = testFacebookConnection;
window.testFacebookAdAccounts = testFacebookAdAccounts;
window.testFacebookCampaigns = testFacebookCampaigns;
window.testFacebookInsights = testFacebookInsights;
window.runFullFacebookTest = runFullFacebookTest;

console.log('‚úÖ Facebook API Test Script ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!');
console.log('');
console.log('üìñ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:');
console.log('1. ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: runFullFacebookTest()');
console.log('2. ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° token: runFullFacebookTest("YOUR_ACCESS_TOKEN")');
console.log('3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô:');
console.log('   - testFacebookConfig()');
console.log('   - testFacebookConnection("ACCESS_TOKEN")');
console.log('   - testFacebookAdAccounts("ACCESS_TOKEN")');
console.log('   - testFacebookCampaigns("ACCESS_TOKEN", "ACCOUNT_ID")');
console.log('   - testFacebookInsights("ACCESS_TOKEN", "CAMPAIGN_ID")');
console.log('');
console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢: runFullFacebookTest()');